{"ast":null,"code":"var _jsxFileName = \"/project/API-react/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport MoviesList from './components/MoviesList';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [errorTry, setErrorTry] = useState(true);\n  const fetchMovieHandler = (async () => {\n    try {\n      const response = await fetch(\"https://swapi.dev/api/film\");\n      if (!response.ok) {\n        throw new Error(\"Something wents wrong......Retrying\");\n      }\n      const data = await response.json();\n      setIsLoading(true);\n      setError(null);\n      const transformedMovies = data.results.map(movieData => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          releaseDate: movieData.release_date\n        };\n      });\n      setMovies(transformedMovies);\n    } catch (error) {\n      if (errorTry) {\n        setInterval(() => {\n          setError(error.message);\n          console.log(error.message);\n        }, 5000);\n      }\n    }\n    setIsLoading(false);\n  }, []);\n  useEffect(() => {\n    fetchMovieHandler();\n  }, [fetchMovieHandler]);\n  const errorTryHandler = () => {\n    setErrorTry(prev => !prev);\n  };\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: [!error && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchMovieHandler,\n        children: \"Fetch Movies\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 18\n      }, this), error && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: errorTryHandler,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [!isLoading && movies.length > 0 && /*#__PURE__*/_jsxDEV(MoviesList, {\n        movies: movies\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 43\n      }, this), !isLoading && movies.length === 0 && !error && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"There is no movie found..\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }, this), !isLoading && error && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 33\n      }, this), isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"loading....\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 23\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"UN7ewm6mw53Cx1nKjUYe6TNEmes=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","MoviesList","App","movies","setMovies","isLoading","setIsLoading","error","setError","errorTry","setErrorTry","fetchMovieHandler","response","fetch","ok","Error","data","json","transformedMovies","results","map","movieData","id","episode_id","title","openingText","opening_crawl","releaseDate","release_date","setInterval","message","console","log","errorTryHandler","prev","length"],"sources":["/project/API-react/src/App.js"],"sourcesContent":["import React, { useState,useEffect,useCallback } from 'react';\n\nimport MoviesList from './components/MoviesList';\nimport './App.css';\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [errorTry,setErrorTry]=useState(true);\n\n  const fetchMovieHandler=(async ()=> {\n    try {      \n    const response = await fetch(\"https://swapi.dev/api/film\");\n\n      if (!response.ok) {      \n        throw new Error(\"Something wents wrong......Retrying\");\n      }\n\n\n    const data = await response.json();\n    setIsLoading(true);\n    setError(null);\n    const transformedMovies = data.results.map((movieData) => {\n      return {\n        id: movieData.episode_id,\n        title: movieData.title,\n        openingText: movieData.opening_crawl,\n        releaseDate: movieData.release_date,\n      };\n    });\n    setMovies(transformedMovies);\n  } catch (error) { \n          if(errorTry){\n\n            setInterval(()=>{ \n              setError(error.message);\n              console.log(error.message)\n            },5000)\n          }\n            \n  }\n  setIsLoading(false);\n  },[]);\n\n  useEffect(()=>{\n    fetchMovieHandler();\n  },[fetchMovieHandler]);\n  \n\n\n\n\nconst errorTryHandler=()=>{\n  setErrorTry(prev=>!prev);\n}\n\n  return (\n    <React.Fragment>\n      <section>\n      {!error && <button onClick={fetchMovieHandler}>Fetch Movies</button>}\n        {error && <button onClick={errorTryHandler}>Cancel</button>}\n      </section>\n      <section>\n      {!isLoading && movies.length > 0 && <MoviesList movies={movies} />}\n        {!isLoading && movies.length === 0 && !error && (\n            <p>There is no movie found..</p>\n        )}\n        {!isLoading && error && <p>{error}</p>}\n        {isLoading && <p>loading....</p>}\n        \n\n      </section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}